[{"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\App.js":"1","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\FirebaseJobList.js":"2","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\reportWebVitals.js":"3","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\NewJob.js":"4","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\index.js":"5","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\NewUserForms.js":"6","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\firebase.js":"7"},{"size":15964,"mtime":1612886377940,"results":"8","hashOfConfig":"9"},{"size":3202,"mtime":1610405684330,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1610150553408,"results":"12","hashOfConfig":"9"},{"size":6021,"mtime":1612885224942,"results":"13","hashOfConfig":"9"},{"size":469,"mtime":1610150553318,"results":"14","hashOfConfig":"11"},{"size":8104,"mtime":1610350401938,"results":"15","hashOfConfig":"9"},{"size":573,"mtime":1610207935992,"results":"16","hashOfConfig":"11"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"i2ydi5",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wpbmun",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\App.js",["32","33","34"],"import './App.css';\r\nimport { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport NewJob from \"./NewJob\";\r\nimport Select from 'react-select';\r\nimport FirebaseJobList from './FirebaseJobList';\r\nimport firebase from './firebase';\r\nimport NewUserForms from './NewUserForms';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { faArrowAltCircleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPowerOff } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // Error messages\r\n      errorMessage: '',\r\n      showErrorMessage: false,\r\n      noFieldsErrorMessage: false,\r\n      showPageCount: true,\r\n      // Response data\r\n      countryList: [],\r\n      allJobs: [],\r\n      selectedOption: { value: '', label: 'All Toronto Area', count: 1, pageNum: 1 },\r\n      // Keyword values\r\n      value: '', // Current keyword chosen\r\n      keywordsConverted: '',\r\n      previousKeywords: '',\r\n      showEnteredKeywords: false,\r\n      // Page Count\r\n      pageCount: '',\r\n      maxPageCount: 1,\r\n      // Next/Previous buttons\r\n      nextButtonDisabled: false,\r\n      prevButtonDisabled: false,\r\n      // User Logged In\r\n      usersEmail: '',\r\n      signedOut: false,\r\n      errorLogOut: false,\r\n    }\r\n    // Dropdown menu Bind\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //Start by loading all the newest jobs in all Toronto areas\r\n  componentDidMount() {\r\n    // onAuthStateChanged method.When a user successfully signs in, get information about the user in the observer.\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/firebase.User\r\n        const uid = user.uid;\r\n        this.setState({\r\n          userLoggedIn: uid,\r\n          usersEmail: user.email\r\n        });\r\n        // ...\r\n      } else {\r\n        this.setState({\r\n          signedOut: true\r\n        })\r\n      }\r\n    });\r\n    // Get the list of all Toronto areas and upload them to the array to use for the dropdown menu\r\n    axios({\r\n      method: \"GET\",\r\n      url: `https://api.adzuna.com/v1/api/jobs/ca/geodata?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&location0=Canada&location1=Ontario&location2=Toronto`,\r\n      responseType: \"json\",\r\n    }).then((response) => {\r\n      // Push data into areaArray, Toronto All is default\r\n      const areaArray = [{ value: '', label: 'All Toronto Area', count: 1, pageNum: 1 }];\r\n      for (let i = 0; i < response.data.locations.length; i++){\r\n        areaArray.push({ value: response.data.locations[i].location.area[3].replaceAll(\" \", \"%20\").replace(/^/, '&location3='), label: response.data.locations[i].location.display_name, count: response.data.locations[i].count, pageNum: 1 })\r\n      }\r\n      this.setState({\r\n        countryList: areaArray\r\n      });\r\n    }).catch(err => {\r\n      // Show Error message if no data is retrieved\r\n      this.setState({ \r\n        errorMessage: err.message,\r\n        showErrorMessage: true,\r\n        showPageCount: false\r\n      });\r\n    });\r\n      // Show data for all Toronto areas\r\n      axios({\r\n        method: \"GET\",\r\n        url: `https://api.adzuna.com/v1/api/jobs/ca/search/1?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&results_per_page=50&location0=Canada&location1=Ontario&location2=Toronto&sort_by=date`,\r\n        responseType: \"json\",\r\n      }).then((response) => {\r\n          this.setState({\r\n            selectedOption: {\r\n              ...this.state.selectedOption,\r\n              count: response.data.count\r\n            }\r\n          })\r\n      }).catch(err => {\r\n        // Show Error message if no data is retrieved\r\n        this.setState({ \r\n            errorMessage: err.message,\r\n            showErrorMessage: true,\r\n            showPageCount: false\r\n          });\r\n      });\r\n  }\r\n\r\n\r\n  // New search if a value is selected from dropdown, keywords changed or next/previous page\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n      // Do the update only when the previous/current state items don't match\r\n      if ((this.state.selectedOption !== prevState.selectedOption) || (this.state.keywordsConverted !== prevState.keywordsConverted)) {\r\n        // Do AXIOS every time the area, search keywords are changed or next/previous page\r\n        axios({\r\n          method: \"GET\",\r\n          url: `https://api.adzuna.com/v1/api/jobs/ca/search/${this.state.selectedOption.pageNum}?app_id=18a606b4&app_key=35897d0612c0636126c9cdeddc06f44d&results_per_page=50${this.state.keywordsConverted}&location0=Canada&location1=Ontario&location2=Toronto${this.state.selectedOption.value}&sort_by=date`,\r\n          responseType: \"json\",\r\n        }).then((response) => {\r\n          // Add classes to every object for styling\r\n          const jobsSelected = response.data.results;\r\n          for(let i=0; i < jobsSelected.length; i++){\r\n            if (i % 2 === 0) {\r\n              jobsSelected[i].class = \"jobListing classOne\";\r\n            }\r\n            else {\r\n              jobsSelected[i].class = \"jobListing classTwo\";\r\n            }\r\n          }\r\n          // Update Job list and page count// Show Page Count; hide error messages\r\n          this.setState({\r\n            allJobs: jobsSelected,\r\n            keywordCountValue: response.data.count,\r\n            showPageCount: true,\r\n            noFieldsErrorMessage: false,\r\n          });\r\n          // Deactivate Previous button if one page\r\n          if ((this.state.selectedOption.pageNum) == \"1\") {\r\n            this.setState({\r\n              prevButtonDisabled: true\r\n            })\r\n          }\r\n          // Run Page Count update function\r\n          this.pageCountFunc();\r\n          // Activate Next button if more than 1 page\r\n          if (this.state.maxPageCount > 1) {\r\n            this.setState({\r\n              nextButtonDisabled: false\r\n            })\r\n          }\r\n          // If max page number reached, disable Next button\r\n          if (this.state.selectedOption.pageNum == this.state.maxPageCount) {\r\n            this.setState({\r\n              nextButtonDisabled: true,\r\n            })\r\n          }\r\n          // Show error message when no data retrieved\r\n          if (response.data.count == 0) {\r\n            this.setState({\r\n              noFieldsErrorMessage: true,\r\n              showPageCount: false\r\n            })\r\n          }\r\n        }).catch(err => {\r\n          // Show error if AXIOS didn't work\r\n          this.setState({ \r\n            errorMessage: err.message,\r\n            showErrorMessage: true,\r\n            showPageCount: false\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n  // Handle Dropdown Menu change\r\n  handleChange = selectedOption => {\r\n    this.setState({ \r\n      selectedOption \r\n    });\r\n  };\r\n\r\n  // On Keyword Input field Change target the state\r\n  handleChangeForm=(event)=> { \r\n    this.setState({ \r\n      value: event.target.value\r\n    }); \r\n  }\r\n\r\n  // On Keyword Form Submit:\r\n  handleSubmit = (event)=> {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Check if the field is not empty. \r\n    // If it's not empty, create a field for API call and a field for comparison; empty the input; update starting page count\r\n    if (this.state.value !== \"\") {\r\n      this.setState({ \r\n        keywordsConverted: this.state.value.replaceAll(\" \", \"%20\").replace(/^/, '&what='), \r\n        previousKeywords: this.state.value, \r\n        value: '',\r\n        showEnteredKeywords: true,\r\n        selectedOption: {\r\n          ...this.state.selectedOption,\r\n            pageNum: 1\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  // Remove keywords button (update all fields, clear values)\r\n  removeKeywords = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    this.setState({\r\n      value: '',\r\n      keywordsConverted: '',\r\n      previousKeywords: '',\r\n      showEnteredKeywords: false,\r\n      selectedOption: {\r\n        ...this.state.selectedOption,\r\n          pageNum: 1\r\n      }\r\n    })\r\n  }\r\n\r\n  // Count pages (depending if keywords are entered or no keywords use different setState vales)\r\n  pageCountFunc = ()=>{\r\n    if (this.state.keywordCountValue > 0){\r\n      this.setState({\r\n        maxPageCount: Math.ceil(this.state.keywordCountValue / 50)\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        maxPageCount: Math.ceil(this.state.selectedOption.count / 50)\r\n      })\r\n    }\r\n  }\r\n\r\n  // Next Page Button\r\n  nextPage = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Show Previous button\r\n    this.setState({\r\n      prevButtonDisabled: false\r\n    })\r\n    // Update page numbers\r\n    if ((this.state.selectedOption.pageNum + 1) <= this.state.maxPageCount) {\r\n      this.setState(prevState => ({\r\n        selectedOption: {\r\n          ...prevState.selectedOption,\r\n          pageNum: this.state.selectedOption.pageNum + 1 \r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  // Previous Page Button\r\n  previousPage = (event) => {\r\n    // Prevent Default\r\n    event.preventDefault();\r\n    // Show NEXT button\r\n    this.setState({\r\n      nextButtonDisabled: false\r\n    })\r\n    // Update page numbers\r\n    if ((this.state.selectedOption.pageNum - 1) > 0){\r\n      this.setState(prevState => ({\r\n        selectedOption: {\r\n          ...prevState.selectedOption,\r\n          pageNum: this.state.selectedOption.pageNum - 1\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  // Reload page if error\r\n  reloadPage = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  // Log Out\r\n  logOut = () => {\r\n    firebase.auth().signOut().then(function () {\r\n      // Sign-out successful.\r\n      window.location.reload();\r\n    }).catch(function (error) {\r\n      // An error happened.\r\n      this.setState({\r\n        errorLogOut: true,\r\n        usersEmail: ''\r\n      });\r\n    });\r\n  }\r\n\r\n  // Display data\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Show error message if AXIOS didn't work, button to reload the page */}\r\n        {this.state.showErrorMessage && <div className=\"blockView\">\r\n          <div className=\"error\">\r\n            <h6>Sorry... Something went wrong, not all data can be retrieved.</h6>\r\n            <button onClick={this.reloadPage}>Try again!</button>\r\n            <p>{this.state.errorMessage}</p>\r\n          </div>\r\n        </div>}\r\n        <header>\r\n              <div className=\"wrapper\">\r\n                <div className=\"logIn\">\r\n                  {/* <NewUserForms /> */}\r\n                  {/* Log In / Add New User forms */}\r\n                  <h1>Find Your Job In Toronto</h1>\r\n                  <div className=\"logInFields\">\r\n                    {/* User Logged In */}\r\n                    {this.state.usersEmail ? <h5 className=\"signIn\">Logged in as {this.state.usersEmail}</h5> : null}\r\n                    {this.state.errorLogOut && <h5 className=\"signIn\">Log Out failed!</h5>}\r\n                    {/* Log In */}\r\n                    {!this.state.usersEmail && <h5 className=\"signIn\">Sign In</h5>}\r\n                    {!this.state.usersEmail ? <NewUserForms /> : null}\r\n                    {/* Log Out */}\r\n                    {this.state.usersEmail ? <button type=\"submit\" className=\"logOut\" onClick={this.logOut} aria-label=\"Log out\"><FontAwesomeIcon icon={faPowerOff} size=\"2x\" /></button> : null}\r\n                  </div>\r\n                </div>\r\n                <div className=\"searchFields\">\r\n                  <div className=\"citySearch\">\r\n                  {/* Using react-select package for the dropdown menu */}\r\n                    <Select\r\n                      value={this.state.selectedOption}\r\n                      onChange={this.handleChange}\r\n                      options={this.state.countryList}\r\n                      theme={theme => ({\r\n                        ...theme,\r\n                        borderRadius: 5,\r\n                        colors: {\r\n                          ...theme.colors,\r\n                          primary25: '#efa50e',\r\n                          primary: '#4e007a',\r\n                        }\r\n                      })}\r\n                    />\r\n                    {/* Next/Previous buttons (hidden if 0 search results)*/}\r\n                      {this.state.showPageCount &&\r\n                        <div className=\"nextPrevButtons\">\r\n                          <button type=\"submit\" onClick={this.previousPage} disabled={this.state.prevButtonDisabled} aria-label=\"previous page\"><FontAwesomeIcon icon={faArrowAltCircleLeft} aria-hidden=\"true\" /></button>\r\n                          <p className=\"pageCount\">{`${this.state.selectedOption.pageNum} of ${this.state.maxPageCount}`} </p>\r\n                          <button type=\"submit\" onClick={this.nextPage} disabled={this.state.nextButtonDisabled} aria-label=\"Next page\"><FontAwesomeIcon icon={faArrowAltCircleRight} aria-hidden=\"true\" /></button>\r\n                        </div>}\r\n                  </div>\r\n                  {/* Search by keywords form */}\r\n                  <div className=\"keywords\">\r\n                    <form className=\"keywordForm\">\r\n                      <label htmlFor=\"searchBy\" className=\"srOnly\">Search by job title, keywords, or company</label>\r\n                      <input id=\"searchBy\" type=\"text\" value={this.state.value} onChange={this.handleChangeForm} placeholder=\"Job title,  keywords, or company\"/>\r\n                      <button type=\"submit\" onClick={this.handleSubmit} aria-label=\"Search\"><FontAwesomeIcon icon={faSearch} size=\"2x\" /></ button>\r\n                    </form>\r\n                    <div className=\"keywordsDiv\">\r\n                      {this.state.showEnteredKeywords && <div className=\"searchOptions\">\r\n                        <p>Current search by: \"{(this.state.previousKeywords)}\"</p>\r\n                        <button type=\"submit\" onClick={this.removeKeywords}>Clear Keywords</button>\r\n                      </div>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          </header>\r\n          {/* New Job list items // Imported from NewJob.js */}\r\n          <main className=\"wrapper\">\r\n            {/* Show error message if no search results */}\r\n            <section>\r\n              {this.state.noFieldsErrorMessage && <div className=\"errorNoResults\"><h6>No Search Results, please try again!</h6></div>}\r\n              <ul>\r\n                {\r\n                  this.state.allJobs.map((eachJob) => {\r\n                    return (\r\n                      <li key={eachJob.id}>\r\n                        <NewJob passUserId={this.state.userLoggedIn} \r\n                          keyId={eachJob.id}\r\n                          jobTitle={eachJob.title}\r\n                          company={eachJob.company.display_name}\r\n                          contract={eachJob.contract_type}\r\n                          category={eachJob.category.label}\r\n                          time={eachJob.created}\r\n                          description={eachJob.description}\r\n                          jobUrl={eachJob.redirect_url}\r\n                          classIndex={eachJob.class}\r\n                          inFirebase={eachJob.itemInFirebase}\r\n                        />\r\n                      </li>\r\n                    );\r\n                  })\r\n                }\r\n              </ul>\r\n            </section>\r\n            <aside>\r\n              {!this.state.userLoggedIn && <h5>Sign In To Add Items To Wish List</h5>}\r\n              {this.state.userLoggedIn && <h5>Saved Jobs</h5>}\r\n              <FirebaseJobList passUserId={this.state.userLoggedIn} passSelectedOption={this.state.selectedOption} passKeywordsConverted={this.state.keywordsConverted} />\r\n            </aside>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\FirebaseJobList.js",[],"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\reportWebVitals.js",[],"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\NewJob.js",["35","36","37","38"],"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\index.js",[],"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\NewUserForms.js",[],"D:\\webDevelopment\\bootcamp\\project5\\inga-locmele-project-five-\\src\\firebase.js",[],{"ruleId":"39","severity":1,"message":"40","line":143,"column":51,"nodeType":"41","messageId":"42","endLine":143,"endColumn":53},{"ruleId":"39","severity":1,"message":"40","line":157,"column":49,"nodeType":"41","messageId":"42","endLine":157,"endColumn":51},{"ruleId":"39","severity":1,"message":"40","line":163,"column":35,"nodeType":"41","messageId":"42","endLine":163,"endColumn":37},{"ruleId":"39","severity":1,"message":"40","line":23,"column":33,"nodeType":"41","messageId":"42","endLine":23,"endColumn":35},{"ruleId":"39","severity":1,"message":"40","line":24,"column":35,"nodeType":"41","messageId":"42","endLine":24,"endColumn":37},{"ruleId":"39","severity":1,"message":"40","line":25,"column":31,"nodeType":"41","messageId":"42","endLine":25,"endColumn":33},{"ruleId":"39","severity":1,"message":"40","line":111,"column":60,"nodeType":"41","messageId":"42","endLine":111,"endColumn":62},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]